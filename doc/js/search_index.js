var search_data = {"index":{"searchIndex":["graph","info","map","test_main","add_edge()","add_node()","add_route()","clear()","exist_nodes()","get_edge()","get_node()","initialize_metros()","initialize_routes()","list()","metro()","metros()","new()","new()","new()","query()","remove_edge()","remove_node()","routes()","setup()","show_map()","statistic()","statistic_average_distance()","statistic_average_population()","statistic_biggest_city()","statistic_continents()","statistic_longest()","statistic_shortest()","statistic_smallest_city()","statistic_sub_city()","test_insert_edges()","test_insert_nodes()","test_load_map()","update_edge()","update_node()","map_data.json","created.rid"],"longSearchIndex":["graph","info","map","test_main","graph#add_edge()","graph#add_node()","map#add_route()","graph#clear()","graph#exist_nodes()","graph#get_edge()","graph#get_node()","map#initialize_metros()","map#initialize_routes()","info#list()","info#metro()","map#metros()","graph::new()","info::new()","map::new()","info#query()","graph#remove_edge()","graph#remove_node()","map#routes()","test_main#setup()","info#show_map()","info#statistic()","info#statistic_average_distance()","info#statistic_average_population()","info#statistic_biggest_city()","info#statistic_continents()","info#statistic_longest()","info#statistic_shortest()","info#statistic_smallest_city()","info#statistic_sub_city()","test_main#test_insert_edges()","test_main#test_insert_nodes()","test_main#test_load_map()","graph#update_edge()","graph#update_node()","",""],"info":[["Graph","","Graph.html","",""],["Info","","Info.html","",""],["Map","","Map.html","",""],["TEST_Main","","TEST_Main.html","",""],["add_edge","Graph","Graph.html#method-i-add_edge","(node_from_key, node_to_key, value)","<p>Add an edge to the value\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["add_node","Graph","Graph.html#method-i-add_node","(key, value)","<p>Add a node to the graph\n<p>@param [Object, #key] node key @param [Object, #value] node value\n"],["add_route","Map","Map.html#method-i-add_route","(metro1, metro2, distance)","<p>Add a route to the map\n<p>@param [String, #metro1] the abbreviation of starting matro @param [String,\n#metro2 …\n"],["clear","Graph","Graph.html#method-i-clear","()","<p>Clear every thing in the graph\n"],["exist_nodes","Graph","Graph.html#method-i-exist_nodes","(key_arr)","<p>Add a node to the graph\n<p>@param [Object, #key] contents the contents to reverse  @param [Object,\n#value …\n"],["get_edge","Graph","Graph.html#method-i-get_edge","(node_from_key, node_to_key)","<p>Get a edge by from_key and to_key\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["get_node","Graph","Graph.html#method-i-get_node","(key)","<p>Get a node by key\n<p>@param [Object, #key] node key\n"],["initialize_metros","Map","Map.html#method-i-initialize_metros","(metros)","<p>Add metros to the map\n<p>@param [Array, #metros] the array of metros information\n"],["initialize_routes","Map","Map.html#method-i-initialize_routes","(routes)","<p>Add routes to the map\n<p>@param [Array, #routes] the array of routes information\n"],["list","Info","Info.html#method-i-list","()","<p>List all metros&#39; information\n"],["metro","Info","Info.html#method-i-metro","(code)","<p>Get information for specified metro\n<p>@param [String, #code] the code of the metro from query\n"],["metros","Map","Map.html#method-i-metros","()","<p>Return all metro objects\n"],["new","Graph","Graph.html#method-c-new","()","<p>Constructor for Graph\n"],["new","Info","Info.html#method-c-new","(map)","<p>Constructor for Info\n"],["new","Map","Map.html#method-c-new","(filename)","<p>Constructor for Map\n"],["query","Info","Info.html#method-i-query","(query)","<p>Use to accept and process queries\n<p>@param [String, #query] the query from user\n"],["remove_edge","Graph","Graph.html#method-i-remove_edge","(node_from_key, node_to_key)","<p>Remove an edge by from_key and to_key\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, …\n"],["remove_node","Graph","Graph.html#method-i-remove_node","(key)","<p>Remove a node by key\n<p>@param [Object, #key] node key @param [Object, #value] node value\n"],["routes","Map","Map.html#method-i-routes","()","<p>Return all route objects\n"],["setup","TEST_Main","TEST_Main.html#method-i-setup","()","<p>Test set up\n"],["show_map","Info","Info.html#method-i-show_map","()","<p>Show the routes map\n"],["statistic","Info","Info.html#method-i-statistic","()","<p>Output all statistic information\n"],["statistic_average_distance","Info","Info.html#method-i-statistic_average_distance","()","<p>Return the average distance of all the flights in the network\n<p>@return [String] the average distance of …\n"],["statistic_average_population","Info","Info.html#method-i-statistic_average_population","()","<p>Return the average size (by population) of all the cities served by CSAir\n<p>@return [String] the average …\n"],["statistic_biggest_city","Info","Info.html#method-i-statistic_biggest_city","()","<p>Return the biggest city (by population) served by CSAir\n<p>@return [String] the biggest city (by population) …\n"],["statistic_continents","Info","Info.html#method-i-statistic_continents","()","<p>Print a list of the continents served by CSAir and which cities are in them\n"],["statistic_longest","Info","Info.html#method-i-statistic_longest","()","<p>Return the longest single flight in the network\n<p>@return [String] the longest single flight in the network …\n"],["statistic_shortest","Info","Info.html#method-i-statistic_shortest","()","<p>Return the shortest single flight in the network\n<p>@return [String] the shortest single flight in the network …\n"],["statistic_smallest_city","Info","Info.html#method-i-statistic_smallest_city","()","<p>Return the smallest city (by population) served by CSAir\n<p>@return [String] the smallest city (by population) …\n"],["statistic_sub_city","Info","Info.html#method-i-statistic_sub_city","()","<p>Identifying CSAir&#39;s hub cities – the cities that have the most direct\nconnections.\n<p>@return [String] …\n"],["test_insert_edges","TEST_Main","TEST_Main.html#method-i-test_insert_edges","()","<p>Test graph edges insertion\n"],["test_insert_nodes","TEST_Main","TEST_Main.html#method-i-test_insert_nodes","()","<p>Test graph nodes insertion\n"],["test_load_map","TEST_Main","TEST_Main.html#method-i-test_load_map","()","<p>Test loading a map\n"],["update_edge","Graph","Graph.html#method-i-update_edge","(node_from_key, node_to_key, value)","<p>Update an edge to the new value\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["update_node","Graph","Graph.html#method-i-update_node","(key, value)","<p>Update a node with key to the new value\n<p>@param [Object, #key] node key @param [Object, #value] node value …\n"],["map_data.json","","data/map_data_json.html","","<p>{\n\n<pre>&quot;data sources&quot; : [\n    &quot;http://www.gcmap.com/&quot; ,\n    &quot;http://www.theodora.com/country_digraphs.html&quot; ...</pre>\n"],["created.rid","","doc/created_rid.html","",""]]}}