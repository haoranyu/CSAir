var search_data = {"index":{"searchIndex":["graph","info","map","test_main","add_edge()","add_node()","add_route()","clear()","data_source()","exist_edge()","exist_nodes()","get_edge()","get_node()","get_route_cost()","get_route_distance()","get_route_flying_time()","get_route_layover_time()","get_route_time()","initialize_metros()","initialize_routes()","is_route()","json_encode_map()","json_encode_metros()","json_encode_routes()","merge()","metros()","new()","new()","new()","output_json_map()","print_map()","print_metro_info()","print_metro_list()","print_statistics()","query()","remove_edge()","remove_node()","route_information()","routes()","setup()","statistic_average_distance()","statistic_average_population()","statistic_biggest_city()","statistic_continents()","statistic_hub_city()","statistic_longest_flight()","statistic_shortest_flight()","statistic_smallest_city()","test_average_distance()","test_average_population()","test_biggest_city()","test_hub_city()","test_insert_edges()","test_insert_nodes()","test_is_route()","test_load_map()","test_longest_flight()","test_map_merge()","test_remove_node()","test_route_cost()","test_route_distance()","test_route_flying_time()","test_route_layover_time()","test_route_time()","test_shortest_flight()","test_smallest_city()","update_edge()","update_metro_attibute()","update_node()","cmi_hub.json","map_data.json","map_data_output.json","graph.html","info.html","map.html","test_main.html","created.rid","cmi_hub_json.html","map_data_json.html","map_data_output_json.html","graph_html.html","info_html.html","map_html.html","test_main_html.html","created_rid.html","map_data_json_html.html","created_rid_html.html","index_html.html","darkfish_js.html","jquery_js.html","navigation_js.html","search_index_js.html","search_js.html","searcher_js.html","rdoc_css.html","table_of_contents_html.html","index.html","darkfish.js","jquery.js","navigation.js","search.js","search_index.js","searcher.js","rdoc.css","table_of_contents.html"],"longSearchIndex":["graph","info","map","test_main","graph#add_edge()","graph#add_node()","map#add_route()","graph#clear()","map#data_source()","graph#exist_edge()","graph#exist_nodes()","graph#get_edge()","graph#get_node()","info#get_route_cost()","info#get_route_distance()","info#get_route_flying_time()","info#get_route_layover_time()","info#get_route_time()","map#initialize_metros()","map#initialize_routes()","info#is_route()","map#json_encode_map()","map#json_encode_metros()","map#json_encode_routes()","map#merge()","map#metros()","graph::new()","info::new()","map::new()","map#output_json_map()","info#print_map()","info#print_metro_info()","info#print_metro_list()","info#print_statistics()","info#query()","graph#remove_edge()","graph#remove_node()","info#route_information()","map#routes()","test_main#setup()","info#statistic_average_distance()","info#statistic_average_population()","info#statistic_biggest_city()","info#statistic_continents()","info#statistic_hub_city()","info#statistic_longest_flight()","info#statistic_shortest_flight()","info#statistic_smallest_city()","test_main#test_average_distance()","test_main#test_average_population()","test_main#test_biggest_city()","test_main#test_hub_city()","test_main#test_insert_edges()","test_main#test_insert_nodes()","test_main#test_is_route()","test_main#test_load_map()","test_main#test_longest_flight()","test_main#test_map_merge()","test_main#test_remove_node()","test_main#test_route_cost()","test_main#test_route_distance()","test_main#test_route_flying_time()","test_main#test_route_layover_time()","test_main#test_route_time()","test_main#test_shortest_flight()","test_main#test_smallest_city()","graph#update_edge()","map#update_metro_attibute()","graph#update_node()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Graph","","Graph.html","",""],["Info","","Info.html","",""],["Map","","Map.html","",""],["TEST_Main","","TEST_Main.html","",""],["add_edge","Graph","Graph.html#method-i-add_edge","(node_from_key, node_to_key, value)","<p>Add an edge to the value\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["add_node","Graph","Graph.html#method-i-add_node","(key, value)","<p>Add a node to the graph\n<p>@param [Object, #key] node key @param [Object, #value] node value\n"],["add_route","Map","Map.html#method-i-add_route","(metro1, metro2, distance)","<p>Add a route to the map\n<p>@param [String, #metro1] the abbreviation of starting matro @param [String,\n#metro2 …\n"],["clear","Graph","Graph.html#method-i-clear","()","<p>Clear every thing in the graph\n"],["data_source","Map","Map.html#method-i-data_source","()","<p>Return all data source\n"],["exist_edge","Graph","Graph.html#method-i-exist_edge","(node_from_key, node_to_key)","<p>Exist edge\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key] the to node …\n"],["exist_nodes","Graph","Graph.html#method-i-exist_nodes","(key_arr)","<p>Add a node to the graph\n<p>@param [Object, #key] contents the contents to reverse  @param [Object,\n#value …\n"],["get_edge","Graph","Graph.html#method-i-get_edge","(node_from_key, node_to_key)","<p>Get a edge by from_key and to_key\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["get_node","Graph","Graph.html#method-i-get_node","(key)","<p>Get a node by key\n<p>@param [Object, #key] node key\n"],["get_route_cost","Info","Info.html#method-i-get_route_cost","(metro_list)","<p>Get the total cost of a route\n"],["get_route_distance","Info","Info.html#method-i-get_route_distance","(metro_list)","<p>Get the total distance of a route\n"],["get_route_flying_time","Info","Info.html#method-i-get_route_flying_time","(metro_list)","<p>Get the flying time of a route\n"],["get_route_layover_time","Info","Info.html#method-i-get_route_layover_time","(metro_list)","<p>Get the layover time of a route\n"],["get_route_time","Info","Info.html#method-i-get_route_time","(metro_list)","<p>Get the total time of a route\n"],["initialize_metros","Map","Map.html#method-i-initialize_metros","(metros)","<p>Add metros to the map\n<p>@param [Array, #metros] the array of metros information\n"],["initialize_routes","Map","Map.html#method-i-initialize_routes","(routes)","<p>Add routes to the map\n<p>@param [Array, #routes] the array of routes information\n"],["is_route","Info","Info.html#method-i-is_route","(metro_list)","<p>Judge the route is legal or not\n"],["json_encode_map","Map","Map.html#method-i-json_encode_map","()","<p>Using json to encode the map\n"],["json_encode_metros","Map","Map.html#method-i-json_encode_metros","()","<p>Obtain the array of metros for json to encode\n"],["json_encode_routes","Map","Map.html#method-i-json_encode_routes","()","<p>Obtain the array of routes for json to encode\n"],["merge","Map","Map.html#method-i-merge","(filename)","<p>Merge a json file for a new map into the old one\n"],["metros","Map","Map.html#method-i-metros","()","<p>Return all metro objects\n"],["new","Graph","Graph.html#method-c-new","()","<p>Constructor for Graph\n"],["new","Info","Info.html#method-c-new","(map)","<p>Constructor for Info\n"],["new","Map","Map.html#method-c-new","(filename)","<p>Constructor for Map\n"],["output_json_map","Map","Map.html#method-i-output_json_map","()","<p>Output a json map to the disk\n"],["print_map","Info","Info.html#method-i-print_map","()","<p>Show the routes map\n"],["print_metro_info","Info","Info.html#method-i-print_metro_info","(code)","<p>Get information for specified metro\n<p>@param [String, #code] the code of the metro from query\n"],["print_metro_list","Info","Info.html#method-i-print_metro_list","()","<p>List all metros&#39; information\n"],["print_statistics","Info","Info.html#method-i-print_statistics","()","<p>Output all statistic information\n"],["query","Info","Info.html#method-i-query","(query)","<p>Use to accept and process queries\n<p>@param [String, #query] the query from user\n"],["remove_edge","Graph","Graph.html#method-i-remove_edge","(node_from_key, node_to_key)","<p>Remove an edge by from_key and to_key\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, …\n"],["remove_node","Graph","Graph.html#method-i-remove_node","(key)","<p>Remove a node by key and it will also remove edge with an end on it\n<p>@param [Object, #key] node key @param …\n"],["route_information","Info","Info.html#method-i-route_information","(metro_list)","<p>List distance / cost / time information about a route\n"],["routes","Map","Map.html#method-i-routes","()","<p>Return all route objects\n"],["setup","TEST_Main","TEST_Main.html#method-i-setup","()","<p>Test set up\n"],["statistic_average_distance","Info","Info.html#method-i-statistic_average_distance","()","<p>Return the average distance of all the flights in the network\n<p>@return [String] the average distance of …\n"],["statistic_average_population","Info","Info.html#method-i-statistic_average_population","()","<p>Return the average size (by population) of all the cities served by CSAir\n<p>@return [String] the average …\n"],["statistic_biggest_city","Info","Info.html#method-i-statistic_biggest_city","()","<p>Return the biggest city (by population) served by CSAir\n<p>@return [String] the biggest city (by population) …\n"],["statistic_continents","Info","Info.html#method-i-statistic_continents","()","<p>Print a list of the continents served by CSAir and which cities are in them\n"],["statistic_hub_city","Info","Info.html#method-i-statistic_hub_city","()","<p>Identifying CSAir&#39;s hub cities – the cities that have the most direct\nconnections.\n<p>@return [String] …\n"],["statistic_longest_flight","Info","Info.html#method-i-statistic_longest_flight","()","<p>Return the longest single flight in the network\n<p>@return [String] the longest single flight in the network …\n"],["statistic_shortest_flight","Info","Info.html#method-i-statistic_shortest_flight","()","<p>Return the shortest single flight in the network\n<p>@return [String] the shortest single flight in the network …\n"],["statistic_smallest_city","Info","Info.html#method-i-statistic_smallest_city","()","<p>Return the smallest city (by population) served by CSAir\n<p>@return [String] the smallest city (by population) …\n"],["test_average_distance","TEST_Main","TEST_Main.html#method-i-test_average_distance","()","<p>Test statistic_average_distance\n"],["test_average_population","TEST_Main","TEST_Main.html#method-i-test_average_population","()","<p>Test statistic_average_population\n"],["test_biggest_city","TEST_Main","TEST_Main.html#method-i-test_biggest_city","()","<p>Test statistic_biggest_city\n"],["test_hub_city","TEST_Main","TEST_Main.html#method-i-test_hub_city","()","<p>Test statistic_hub_city\n"],["test_insert_edges","TEST_Main","TEST_Main.html#method-i-test_insert_edges","()","<p>Test graph edges insertion\n"],["test_insert_nodes","TEST_Main","TEST_Main.html#method-i-test_insert_nodes","()","<p>Test graph nodes insertion\n"],["test_is_route","TEST_Main","TEST_Main.html#method-i-test_is_route","()","<p>Test route existence\n"],["test_load_map","TEST_Main","TEST_Main.html#method-i-test_load_map","()","<p>Test loading a map\n"],["test_longest_flight","TEST_Main","TEST_Main.html#method-i-test_longest_flight","()","<p>Test statistic_longest_flight\n"],["test_map_merge","TEST_Main","TEST_Main.html#method-i-test_map_merge","()","<p>Test the merge of a new map\n"],["test_remove_node","TEST_Main","TEST_Main.html#method-i-test_remove_node","()","<p>Test graph vertex deletion\n"],["test_route_cost","TEST_Main","TEST_Main.html#method-i-test_route_cost","()","<p>Test route cost\n"],["test_route_distance","TEST_Main","TEST_Main.html#method-i-test_route_distance","()","<p>Test route distance\n"],["test_route_flying_time","TEST_Main","TEST_Main.html#method-i-test_route_flying_time","()","<p>Test route flying_time\n"],["test_route_layover_time","TEST_Main","TEST_Main.html#method-i-test_route_layover_time","()","<p>Test route layover_time\n"],["test_route_time","TEST_Main","TEST_Main.html#method-i-test_route_time","()","<p>Test total route time\n"],["test_shortest_flight","TEST_Main","TEST_Main.html#method-i-test_shortest_flight","()","<p>Test statistic_shortest_flight\n"],["test_smallest_city","TEST_Main","TEST_Main.html#method-i-test_smallest_city","()","<p>Test statistic_smallest_city\n"],["update_edge","Graph","Graph.html#method-i-update_edge","(node_from_key, node_to_key, value)","<p>Update an edge to the new value\n<p>@param [Object, #node_from_key] the from node key\n<p>@param [Object, #node_to_key …\n"],["update_metro_attibute","Map","Map.html#method-i-update_metro_attibute","(metro, attibute, new_value)","<p>Edit attribute of a metro\n"],["update_node","Graph","Graph.html#method-i-update_node","(key, value)","<p>Update a node with key to the new value\n<p>@param [Object, #key] node key @param [Object, #value] node value …\n"],["cmi_hub.json","","data/cmi_hub_json.html","","<p>{\n\n<pre>&quot;data sources&quot; : [\n    &quot;http://www.gcmap.com/&quot; ,\n    &quot;http://www.theodora.com/country_digraphs.html&quot; ...</pre>\n"],["map_data.json","","data/map_data_json.html","","<p>{\n\n<pre>&quot;data sources&quot; : [\n    &quot;http://www.gcmap.com/&quot; ,\n    &quot;http://www.theodora.com/country_digraphs.html&quot; ...</pre>\n"],["map_data_output.json","","data/map_data_output_json.html","","<p>{“data source”: America“,”timezone“:-4,”coordinates“:{”S“:33,”W“:71},” …\n"],["Graph.html","","doc/Graph_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Info.html","","doc/Info_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Map.html","","doc/Map_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["TEST_Main.html","","doc/TEST_Main_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["created.rid","","doc/created_rid.html","","<p>Fri, 13 Mar 2015 05:46:42 -0500 ./data/cmi_hub.json     Fri, 13 Mar 2015\n05:27:56 -0500 ./data/map_data.json …\n"],["cmi_hub_json.html","","doc/data/cmi_hub_json_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["map_data_json.html","","doc/data/map_data_json_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["map_data_output_json.html","","doc/data/map_data_output_json_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Graph_html.html","","doc/doc/Graph_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Info_html.html","","doc/doc/Info_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Map_html.html","","doc/doc/Map_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["TEST_Main_html.html","","doc/doc/TEST_Main_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["created_rid.html","","doc/doc/created_rid_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["map_data_json_html.html","","doc/doc/data/map_data_json_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["created_rid_html.html","","doc/doc/doc/created_rid_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["index_html.html","","doc/doc/index_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["darkfish_js.html","","doc/doc/js/darkfish_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["jquery_js.html","","doc/doc/js/jquery_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["navigation_js.html","","doc/doc/js/navigation_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["search_index_js.html","","doc/doc/js/search_index_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["search_js.html","","doc/doc/js/search_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["searcher_js.html","","doc/doc/js/searcher_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["rdoc_css.html","","doc/doc/rdoc_css_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["table_of_contents_html.html","","doc/doc/table_of_contents_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["index.html","","doc/index_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["darkfish.js","","doc/js/darkfish_js.html","","\n<pre>Darkfish Page Functions\n$Id: darkfish.js 53 2009-01-07 02:52:03Z deveiant $\n\nAuthor: Michael Granger ...</pre>\n"],["jquery.js","","doc/js/jquery_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["navigation.js","","doc/js/navigation_js.html","","\n<pre>Navigation allows movement using the arrow keys through the search results.\n\nWhen using this library ...</pre>\n"],["search.js","","doc/js/search_js.html","","<p>Search = function(data, input, result) {\n\n<pre>this.data = data;\nthis.$input = $(input);\nthis.$result = $(result); ...</pre>\n"],["search_index.js","","doc/js/search_index_js.html","","<p>var search_data = {“index”:{“searchIndex”:,“longSearchIndex”:,“info”:[,[“ …\n"],["searcher.js","","doc/js/searcher_js.html","","<p>Searcher = function(data) {\n\n<pre>this.data = data;\nthis.handlers = [];</pre>\n<p>}\n"],["rdoc.css","","doc/rdoc_css.html","","\n<pre>&quot;Darkfish&quot; Rdoc CSS\n$Id: rdoc.css 54 2009-01-27 01:09:48Z deveiant $\n\nAuthor: Michael Granger &lt;ged@FaerieMUD.org&gt; ...</pre>\n"],["table_of_contents.html","","doc/table_of_contents_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"]]}}